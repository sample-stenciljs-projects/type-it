/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Loop } from "./components/type-it/type-it";
export { Loop } from "./components/type-it/type-it";
export namespace Components {
    interface TypeIt {
        "loop": Loop;
        "sentences": string[];
        "start": () => Promise<string>;
        "stop": () => Promise<void>;
    }
}
export interface TypeItCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLTypeItElement;
}
declare global {
    interface HTMLTypeItElementEventMap {
        "onAnimationStop": void;
    }
    interface HTMLTypeItElement extends Components.TypeIt, HTMLStencilElement {
        addEventListener<K extends keyof HTMLTypeItElementEventMap>(type: K, listener: (this: HTMLTypeItElement, ev: TypeItCustomEvent<HTMLTypeItElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLTypeItElementEventMap>(type: K, listener: (this: HTMLTypeItElement, ev: TypeItCustomEvent<HTMLTypeItElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLTypeItElement: {
        prototype: HTMLTypeItElement;
        new (): HTMLTypeItElement;
    };
    interface HTMLElementTagNameMap {
        "type-it": HTMLTypeItElement;
    }
}
declare namespace LocalJSX {
    interface TypeIt {
        "loop"?: Loop;
        "onOnAnimationStop"?: (event: TypeItCustomEvent<void>) => void;
        "sentences"?: string[];
    }
    interface IntrinsicElements {
        "type-it": TypeIt;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "type-it": LocalJSX.TypeIt & JSXBase.HTMLAttributes<HTMLTypeItElement>;
        }
    }
}
